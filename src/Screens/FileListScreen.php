<?php

namespace Khamsolt\Orchid\Files\Screens;

use App\Models\User;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Routing\Redirector;
use Khamsolt\Orchid\Files\Authorization\Permissions;
use Khamsolt\Orchid\Files\Contracts\Assignable;
use Khamsolt\Orchid\Files\Contracts\Attachable;
use Khamsolt\Orchid\Files\Contracts\Searchable;
use Khamsolt\Orchid\Files\Exceptions\AttachedFileException;
use Khamsolt\Orchid\Files\Http\Requests\SelectRequest;
use Khamsolt\Orchid\Files\Layouts\FileListLayout;
use Orchid\Alert\Toast;
use Orchid\Screen\Actions\Button;
use Orchid\Screen\Fields\Upload;
use Orchid\Screen\LayoutFactory;
use Orchid\Screen\Screen;
use Orchid\Support\Color;

class FileListScreen extends Screen
{
    private User $user;

    private LayoutFactory $layoutFactory;

    private Searchable $searchService;

    private Attachable $attachService;

    private Assignable $selectManager;

    private Redirector $redirector;

    private Toast $toast;

    public function __construct(
        LayoutFactory $layoutFactory,
        Searchable    $searchService,
        Attachable    $attachService,
        Assignable    $selectManager,
        Redirector    $redirector,
        Toast         $toast
    )
    {
        $this->layoutFactory = $layoutFactory;
        $this->searchService = $searchService;
        $this->attachService = $attachService;
        $this->selectManager = $selectManager;
        $this->redirector = $redirector;
        $this->toast = $toast;

        $this->permission = [
            Permissions::accessFileList(),
        ];
    }

    public function query(Request $request): iterable
    {
        $this->user = $request->user();

        $files = $this->searchService->paginate();

        return [
            'files' => $files,
            'mode' => $request->get('mode'),
            'user' => $this->user,
        ];
    }

    public function name(): ?string
    {
        return 'Files';
    }

    public function description(): ?string
    {
        return 'A list of all your files that you have uploaded through the ORCHID platform';
    }

    public function permission(): ?iterable
    {
        return parent::permission(); // TODO: Change the autogenerated stub
    }

    public function commandBar(): iterable
    {
        return [
            Button::make(__('Select'))
                ->type(Color::DEFAULT())
                ->icon('check')
                ->method('attach')
                ->canSee($this->selectManager->has()),
        ];
    }

    public function layout(): iterable
    {
        return [
            $this->layoutFactory->rows([
                Upload::make('files_with_catalog')->title('Upload With Catalog'),
            ])->canSee($this->user->hasAccess(Permissions::accessFileUploads())),

            $this->layoutFactory->blank([
                FileListLayout::class,
            ]),
        ];
    }

    public function attach(SelectRequest $request): RedirectResponse
    {
        $id = $request->getFirst();

        try {
            $dto = $this->selectManager->retrieve();

            $this->attachService->attach((int)$id, $dto->type, $dto->id, $dto->group);

            $this->toast->success(__('The file has been successfully attached'));

            return $this->redirector->to($dto->redirect);
        } catch (AttachedFileException $exception) {
            $this->toast->error(__('Attempting to attach a file failed, contact the administrator'));
        }

        return $this->redirector->route('platform.main');
    }
}
